const {
  Client,
  GatewayIntentBits,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} = require("discord.js");
const { OpenAI } = require("openai");
require("dotenv").config();
const axios = require("axios");
const ExcelJS = require("exceljs");
const readline = require("readline");
const fs = require("fs");
const { appendToSheet } = require("./sheets");

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessageReactions,
  ],
});

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});
const WEATHER_API_KEY = process.env.WEATHER_API_KEY;

const config = {
  welcomeChannelIds: process.env.CHANNEL_ID
    ? process.env.CHANNEL_ID.split(",").map((id) => id.trim())
    : [],
  datcomChannelId: process.env.DATCOM,
  serverRules: [
    "1. T√¥n tr·ªçng m·ªçi th√†nh vi√™n",
    "2. Kh√¥ng spam v√† qu·∫£ng c√°o",
    "3. Tu√¢n th·ªß quy t·∫Øc c·ªßa Discord",
    "4. Gi·ªØ g√¨n m√¥i tr∆∞·ªùng l√†nh m·∫°nh",
  ],
};

const activePolls = new Map();
const activeGames = new Map();

// S·ª± ki·ªán khi bot s·∫µn s√†ng
client.on("ready", () => {
  client.user.setActivity("Ch√†o m·ª´ng th√†nh vi√™n m·ªõi", { type: "WATCHING" });
});

// H√†m t·∫°o embed welcome message
function createWelcomeEmbed(member) {
  return new EmbedBuilder()
    .setColor("#00ff00")
    .setTitle(`üéâ Ch√†o m·ª´ng th√†nh vi√™n m·ªõi!`)
    .setDescription(`Ch√†o m·ª´ng ${member} ƒë√£ tham gia server c·ªßa ch√∫ng t√¥i!`)
    .setThumbnail(member.user.displayAvatarURL({ dynamic: true }))
    .addFields({
      name: "üìú Lu·∫≠t Server",
      value: config.serverRules.join("\n"),
    })
    .setFooter({
      text: `ID: ${member.id}`,
      iconURL: member.guild.iconURL(),
    })
    .setTimestamp();
}

// S·ª± ki·ªán khi c√≥ th√†nh vi√™n m·ªõi tham gia
client.on("guildMemberAdd", async (member) => {
  try {
    const welcomeChannel = config.welcomeChannelIds
      .map((id) => member.guild.channels.cache.get(id))
      .find((channel) => channel);

    if (welcomeChannel) {
      const welcomeEmbed = createWelcomeEmbed(member);
      await welcomeChannel.send({
        content: `${member} v·ª´a tham gia server! üéâ`,
        embeds: [welcomeEmbed],
      });
    }
  } catch (error) {
    console.error("L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω th√†nh vi√™n m·ªõi:", error);
  }
});

async function generateTriviaQuestion() {
  const response = await openai.chat.completions.create({
    model: "gpt-3.5-turbo",
    messages: [
      {
        role: "system",
        content: `
              B·∫°n l√† m·ªôt bot chuy√™n t·∫°o c√¢u h·ªèi quiz v·ªÅ b√≥ng ƒë√° chuy√™n nghi·ªáp, v·ªõi ki·∫øn th·ª©c phong ph√∫ v·ªÅ l·ªãch s·ª≠ b√≥ng ƒë√°, c·∫ßu th·ªß, c√¢u l·∫°c b·ªô, hu·∫•n luy·ªán vi√™n v√† c√°c kh√≠a c·∫°nh kh√°c nhau trong m√¥n th·ªÉ thao n√†y. H√£y t·∫°o c√¢u h·ªèi theo ƒë·ªãnh d·∫°ng sau:
              [C√¢u h·ªèi]
              A. [ƒê√°p √°n A]
              B. [ƒê√°p √°n B]
              C. [ƒê√°p √°n C]
              D. [ƒê√°p √°n D]
              ---
              ƒê√°p √°n ƒë√∫ng: [A/B/C/D]
              Gi·∫£i th√≠ch: [Gi·∫£i th√≠ch chi ti·∫øt v·ªÅ ƒë√°p √°n ƒë√∫ng]

              ƒê·∫£m b·∫£o r·∫±ng c√°c c√¢u h·ªèi bao g·ªìm c√°c ch·ªß ƒë·ªÅ ƒëa d·∫°ng v√† kh√¥ng ch·ªâ t·∫≠p trung v√†o ƒë·ªôi tuy·ªÉn qu·ªëc gia, v√≠ d·ª•:
              - **C·∫ßu th·ªß huy·ªÅn tho·∫°i**: th√†nh t√≠ch c√° nh√¢n, nh·ªØng kho·∫£nh kh·∫Øc ƒë√°ng nh·ªõ, k·ª∑ l·ª•c ƒë·∫∑c bi·ªát v√† s·ª± nghi·ªáp t·∫°i c√¢u l·∫°c b·ªô v√† ƒë·ªôi tuy·ªÉn.
              - **C√¢u l·∫°c b·ªô n·ªïi ti·∫øng**: l·ªãch s·ª≠, th√†nh t√≠ch ƒë√°ng ch√∫ √Ω, s·ª± ki·ªán ƒë·∫∑c bi·ªát, c√°c k·ª∑ l·ª•c c·ªßa CLB trong n∆∞·ªõc v√† qu·ªëc t·∫ø.
              - **Hu·∫•n luy·ªán vi√™n n·ªïi b·∫≠t**: c√°c chi·∫øn thu·∫≠t ƒë·ªôc ƒë√°o, th√†nh t√≠ch hu·∫•n luy·ªán n·ªïi b·∫≠t, ·∫£nh h∆∞·ªüng c·ªßa h·ªç trong b√≥ng ƒë√° hi·ªán ƒë·∫°i.
              - **C√°c tr·∫≠n ƒë·∫•u kinh ƒëi·ªÉn**: th√¥ng tin v·ªÅ tr·∫≠n ƒë·∫•u kinh ƒëi·ªÉn gi·ªØa c√°c c√¢u l·∫°c b·ªô v√† ƒë·ªôi tuy·ªÉn, k·ªãch b·∫£n h·∫•p d·∫´n ho·∫∑c k·∫øt qu·∫£ b·∫•t ng·ªù.
              - **Nh·ªØng s·ª± ki·ªán v√† c√¢u chuy·ªán √≠t ƒë∆∞·ª£c bi·∫øt ƒë·∫øn** trong b√≥ng ƒë√° qu·ªëc t·∫ø v√† c√¢u l·∫°c b·ªô, nh∆∞ c√°c c·∫ßu th·ªß ch∆∞a n·ªïi ti·∫øng ho·∫∑c c√°c s·ª± ki·ªán l·ªãch s·ª≠ quan tr·ªçng nh∆∞ng √≠t ng∆∞·ªùi bi·∫øt ƒë·∫øn.

              C√¢u h·ªèi c·∫ßn c√≥ ƒë·ªô kh√≥ v·ª´a ph·∫£i ƒë·ªÉ th√°ch th·ª©c c√°c chuy√™n gia b√≥ng ƒë√°, ƒë·∫£m b·∫£o th√¥ng tin ch√≠nh x√°c v√† ƒë√°ng tin c·∫≠y.
            `,
      },
      {
        role: "user",
        content: `
              B·∫°n l√† m·ªôt chuy√™n gia v·ªÅ l·ªãch s·ª≠ b√≥ng ƒë√° to√†n di·ªán, c√≥ hi·ªÉu bi·∫øt s√¢u s·∫Øc v·ªÅ c·∫ßu th·ªß, c√¢u l·∫°c b·ªô, hu·∫•n luy·ªán vi√™n v√† c√°c s·ª± ki·ªán ƒë√°ng nh·ªõ. Khi t·∫°o c√¢u h·ªèi, ƒë·∫£m b·∫£o r·∫±ng c√°c ch·ªß ƒë·ªÅ phong ph√∫ v√† ƒëa d·∫°ng, bao g·ªìm th√¥ng tin t·ª´ c·∫•p ƒë·ªô c√¢u l·∫°c b·ªô ƒë·∫øn ƒë·ªôi tuy·ªÉn, t·ª´ nh·ªØng chi·∫øn thu·∫≠t ƒë·∫∑c bi·ªát c·ªßa c√°c hu·∫•n luy·ªán vi√™n ƒë·∫øn nh·ªØng th√†nh t√≠ch c√° nh√¢n n·ªïi b·∫≠t c·ªßa c·∫ßu th·ªß. Tr√°nh t·∫≠p trung qu√° nhi·ªÅu v√†o ƒë·ªôi tuy·ªÉn qu·ªëc gia v√† m·ªü r·ªông sang c√°c kh√≠a c·∫°nh th√∫ v·ªã kh√°c trong b√≥ng ƒë√°.
            `,
      },
    ],
    temperature: 1.0,
  });

  const content = response.choices[0].message.content;
  const [question, answerSection] = content.split("---");
  const answerLines = answerSection.trim().split("\n");
  const correctAnswer = answerLines[0].split(": ")[1].charAt(0);
  const explanation = answerLines[1].split(": ")[1];

  return {
    question: question.trim(),
    correctAnswer: correctAnswer,
    explanation: explanation,
  };
}

// S·ª± ki·ªán khi nh·∫≠n tin nh·∫Øn
client.on("messageCreate", async (message) => {
  if (message.author.bot) return;

  if (message.content.startsWith("!quiz")) {
    const args = message.content.split(" ");
    const delay = args[1] ? parseInt(args[1]) * 1000 : 10000;

    try {
      const loadingMsg = await message.channel.send(
        "ü§î ƒêang t·∫°o c√¢u h·ªèi quiz..."
      );

      const quiz = await generateTriviaQuestion();

      await loadingMsg.delete();

      activeGames.set(message.channelId, {
        correctAnswer: quiz.correctAnswer,
        explanation: quiz.explanation,
        answers: new Map(),
        endTime: Date.now() + delay,
      });

      await message.channel.send(
        quiz.question +
          "\n\nüí° Tr·∫£ l·ªùi b·∫±ng c√°ch g√µ A, B, C ho·∫∑c D\n‚è∞ Th·ªùi gian: " +
          delay / 1000 +
          " gi√¢y"
      );

      setTimeout(async () => {
        const game = activeGames.get(message.channelId);
        if (!game) return;

        let summary = "üéØ K·∫øt qu·∫£:\n\n";
        summary += `ƒê√°p √°n ƒë√∫ng: ${game.correctAnswer}\n`;
        summary += `üìù Gi·∫£i th√≠ch: ${game.explanation}\n\n`;

        if (game.answers.size === 0) {
          summary += "Kh√¥ng c√≥ ai tr·∫£ l·ªùi üòÖ";
        } else {
          const correctUsers = [];
          const wrongUsers = [];

          game.answers.forEach((answer, userId) => {
            const user = message.guild.members.cache.get(userId);
            const username = user ? user.displayName : "Unknown User";

            if (answer === game.correctAnswer) {
              correctUsers.push(`${username} (${answer})`);
            } else {
              wrongUsers.push(`${username} (${answer})`);
            }
          });

          summary += `‚úÖ Tr·∫£ l·ªùi ƒë√∫ng (${correctUsers.length}):\n${
            correctUsers.length > 0 ? correctUsers.join("\n") : "Kh√¥ng c√≥"
          }\n\n`;
          summary += `‚ùå Tr·∫£ l·ªùi sai (${wrongUsers.length}):\n${
            wrongUsers.length > 0 ? wrongUsers.join("\n") : "Kh√¥ng c√≥"
          }`;
        }

        await message.channel.send(summary);
        activeGames.delete(message.channelId);
      }, delay);
    } catch (error) {
      console.error("L·ªói:", error);
      await message.channel.send("‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u h·ªèi quiz!");
    }
  } else if (activeGames.has(message.channelId)) {
    const game = activeGames.get(message.channelId);
    const answer = message.content.trim().toUpperCase();

    if (["A", "B", "C", "D"].includes(answer)) {
      if (!game.answers.has(message.author.id) && Date.now() < game.endTime) {
        game.answers.set(message.author.id, answer);
        await message.react("üëç");
      }
    }
  }

  // Handle food ordering commands
  if (message.content.includes("eat:")) {
    // Check if the message is from the correct channel
    if (
      !config.datcomChannelId ||
      message.channelId !== config.datcomChannelId
    ) {
      console.log(
        `Food order command ignored - Expected channel: ${config.datcomChannelId}, Actual channel: ${message.channelId}`
      );
      return; // Silently ignore if not in the correct channel
    }

    const timeEatMatch = message.content.match(/^time:(\d+),eat:([^,\s]+)$/);
    const eatOnlyMatch = message.content.match(/^eat:([^,\s]+)$/);

    let merchantId;
    let pollDurationMinutes = 60;

    if (timeEatMatch) {
      pollDurationMinutes = parseInt(timeEatMatch[1]);
      merchantId = timeEatMatch[2];
    } else if (eatOnlyMatch) {
      merchantId = eatOnlyMatch[1];
    } else {
      await message.reply(
        "‚ùå Format kh√¥ng ƒë√∫ng. Vui l√≤ng s·ª≠ d·ª•ng: `time:[ph√∫t],eat:[merchant-id]` ho·∫∑c `eat:[merchant-id]`"
      );
      return;
    }

    try {
      await message.reply("üîç ƒêang t√¨m ki·∫øm menu...");

      const menu = await fetchMenu(merchantId);
      const categories = menu.categories.filter((cat) => cat.items.length > 0);

      const today = new Date();
      const dateOptions = {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
      };
      const vietnameseDate = today.toLocaleDateString("vi-VN", dateOptions);

      let menuNumber = 1;
      const menuItems = new Map();

      await message.channel.send(
        `**üçΩÔ∏è H√¥m nay ƒÉn g√¨? - ${vietnameseDate}**\nTh·ªùi gian c√≤n l·∫°i: ${pollDurationMinutes} ph√∫t\n`
      );

      let currentSection = "";
      let currentItems = [];

      async function sendItemChunk(sectionName, items) {
        if (items.length === 0) return;

        let chunkText = sectionName ? `**${sectionName}**\n\n` : "";
        for (const item of items) {
          chunkText += item;
        }
        await message.channel.send(chunkText);
      }

      for (const category of categories) {
        if (currentItems.length > 0 && category.name.includes("**")) {
          await sendItemChunk(currentSection, currentItems);
          currentItems = [];
        }

        if (category.name.includes("**")) {
          currentSection = category.name;
        }

        for (const item of category.items) {
          const price = item.priceInMinorUnit
            ? `${item.priceInMinorUnit.toLocaleString()} VNƒê`
            : "N/A";
          const itemText = `\`${menuNumber}\` ${item.name} - ${price}\n`;

          menuItems.set(menuNumber, {
            name: item.name,
            price: price,
            category: category.name,
          });
          menuNumber++;

          currentItems.push(itemText);

          if (currentItems.length >= 10) {
            await sendItemChunk(currentSection, currentItems);
            currentItems = [];
            currentSection = "";
          }
        }
      }

      if (currentItems.length > 0) {
        await sendItemChunk(currentSection, currentItems);
      }

      const instructionsText =
        "**C√°ch ƒë·∫∑t m√≥n:**\n" +
        "‚Ä¢ G√µ s·ªë m√≥n ƒÉn b·∫°n mu·ªën ch·ªçn (VD: `1` ho·∫∑c `1 2 3`)\n" +
        "‚Ä¢ C√≥ th·ªÉ ch·ªçn nhi·ªÅu m√≥n c√πng l√∫c\n" +
        `‚Ä¢ Kh·∫£o s√°t s·∫Ω k·∫øt th√∫c sau ${pollDurationMinutes} ph√∫t\n`;

      const pollMessage = await message.channel.send(instructionsText);

      activePolls.set(pollMessage.id, {
        items: menuItems,
        selections: new Map(),
        endTime: Date.now() + pollDurationMinutes * 60000,
        userMessages: new Map(),
      });

      setTimeout(async () => {
        const poll = activePolls.get(pollMessage.id);
        if (!poll) return;

        await message.channel.send(
          `**üîî Kh·∫£o s√°t ƒë√£ k·∫øt th√∫c sau ${pollDurationMinutes} ph√∫t!**`
        );

        // Get order summary
        const summary = await showListAll(message, true);

        // Extract data for sheets
        if (summary && summary.totalItems > 0) {
          for (const [userId, selections] of poll.selections.entries()) {
            try {
              const user = await message.guild.members.fetch(userId);
              const userName = user.nickname || user.user.username;

              for (const [itemNumber, quantity] of selections.entries()) {
                const item = poll.items.get(itemNumber);
                const orderData = {
                  name: userName,
                  price: item.price,
                  quantity: quantity,
                  itemName: item.name,
                  status: "ƒê√£ ƒë·∫∑t",
                  date: new Date().toLocaleDateString("vi-VN"),
                };

                await appendToSheet(orderData);
              }
            } catch (error) {
              console.error("Error updating sheets:", error);
            }
          }
        }

        activePolls.delete(pollMessage.id);
      }, pollDurationMinutes * 60000);
    } catch (error) {
      await message.reply(
        "‚ùå Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c menu. Vui l√≤ng ki·ªÉm tra l·∫°i ID merchant!"
      );
    }
  }

  // Handle listAll command
  if (message.content.toLowerCase() === "listall") {
    if (message.channelId !== process.env.DATCOM) {
      return; // Kh√¥ng ph·∫£n h·ªìi n·∫øu sai channel
    }
    await showListAll(message, false);
    return;
  }

  // Handle number-only messages for food selection
  const numberPattern = /^[\d\s]+$/;
  if (numberPattern.test(message.content.trim())) {
    if (message.channelId !== process.env.DATCOM) {
      return; // Kh√¥ng ph·∫£n h·ªìi n·∫øu sai channel
    }
    const activePoll = Array.from(activePolls.entries()).find(
      ([_, poll]) => Date.now() < poll.endTime
    );

    if (!activePoll) {
      await message.reply("‚ùå Kh√¥ng c√≥ kh·∫£o s√°t n√†o ƒëang di·ªÖn ra!");
      return;
    }

    const [pollId, poll] = activePoll;
    const numbers = message.content.trim().split(/\s+/).map(Number);
    const validSelections = numbers.filter(
      (n) => !isNaN(n) && poll.items.has(n)
    );

    if (validSelections.length > 0) {
      const userSelections =
        poll.selections.get(message.author.id) || new Map();
      validSelections.forEach((n) => {
        userSelections.set(n, (userSelections.get(n) || 0) + 1);
      });
      poll.selections.set(message.author.id, userSelections);

      try {
        const fetchedMessage = await message.fetch();
        await fetchedMessage.react("üëç");
      } catch (error) {
        // Ignore reaction errors
      }

      const selectedItems = validSelections
        .map((n) => `‚Ä¢ ${poll.items.get(n).name} - ${poll.items.get(n).price}`)
        .join("\n");

      const replyMsg = await message.reply({
        content: `‚úÖ ƒê√£ ghi nh·∫≠n l·ª±a ch·ªçn c·ªßa b·∫°n:\n${selectedItems}`,
        allowedMentions: { repliedUser: false },
      });

      if (!poll.userMessages) poll.userMessages = new Map();
      if (!poll.userMessages.get(message.author.id)) {
        poll.userMessages.set(message.author.id, new Map());
      }
      poll.userMessages.get(message.author.id).set(message.id, {
        selections: validSelections,
        replyId: replyMsg.id,
      });

      const filter = (m) => m.id === message.id;
      const collector = message.channel.createMessageCollector({
        filter,
        time: 3600000,
      });

      collector.on("end", async (collected, reason) => {
        if (reason === "messageDelete") {
          try {
            const replyMessage = await message.channel.messages.fetch(
              replyMsg.id
            );
            await replyMessage.delete();
          } catch (error) {
            // Ignore deletion errors
          }

          if (userSelections) {
            validSelections.forEach((num) => {
              const currentCount = userSelections.get(num);
              if (currentCount === 1) {
                userSelections.delete(num);
              } else {
                userSelections.set(num, currentCount - 1);
              }
            });
            if (userSelections.size === 0) {
              poll.selections.delete(message.author.id);
            }
          }

          if (poll.userMessages?.get(message.author.id)) {
            poll.userMessages.get(message.author.id).delete(message.id);
          }
        }
      });
    }
    return;
  }

  // Handle weather command
  if (message.content.startsWith("!tt")) {
    const args = message.content.split(" ");
    const location = args.slice(1).join(" ");

    if (!location) {
      message.reply("H√£y nh·∫≠p v·ªã tr√≠! V√≠ d·ª•: `!weather H√† ƒê√¥ng`");
      return;
    }

    try {
      const { lat, lon, display_name } = await getCoordinates(location);
      const formattedName = formatDisplayName(display_name);

      const response = await axios.get(
        "https://api.openweathermap.org/data/2.5/weather",
        {
          params: {
            lat,
            lon,
            appid: WEATHER_API_KEY,
            lang: "vi",
          },
        }
      );

      const data = response.data;
      const temp = kelvinToCelsius(data.main.temp);
      const feelsLike = kelvinToCelsius(data.main.feels_like);
      const tempMin = kelvinToCelsius(data.main.temp_min);
      const tempMax = kelvinToCelsius(data.main.temp_max);
      const weather = data.weather[0].description;
      const weatherMain = data.weather[0].main;
      const humidity = data.main.humidity;
      const windSpeed = data.wind.speed.toFixed(1);
      const windDeg = data.wind.deg;
      const clouds = data.clouds.all;
      const pressure = data.main.pressure;

      const currentTime = new Date();
      const weatherEmoji = weatherEmojis[weatherMain] || "‚ùì";
      const recommendation = getWeatherRecommendation(
        parseFloat(temp),
        humidity,
        parseFloat(windSpeed),
        weatherMain
      );

      const embed = new EmbedBuilder()
        .setColor(getTemperatureColor(parseFloat(temp)))
        .setTitle(`${weatherEmoji} Th·ªùi ti·∫øt t·∫°i ${formattedName}`)
        .setThumbnail(
          `https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`
        ) // Hi·ªÉn th·ªã bi·ªÉu t∆∞·ª£ng th·ªùi ti·∫øt
        // + 7 ƒë·ªÉ chu·∫©n m√∫i gi·ªù vi·ªát nam

        .setDescription(
          `**C·∫≠p nh·∫≠t l√∫c:** ${formatDateTime(currentTime) + 7} (GMT+7)`
        )

        .addFields(
          {
            name: "üå°Ô∏è Nhi·ªát ƒë·ªô",
            value:
              `> **Hi·ªán t·∫°i:** ${temp}¬∞C\n` +
              `> **C·∫£m gi√°c nh∆∞:** ${feelsLike}¬∞C\n` +
              `> **Cao/Th·∫•p:** ${tempMax}¬∞C / ${tempMin}¬∞C`,
            inline: true,
          },
          {
            name: "üíß ƒê·ªô ·∫©m",
            value: `> **ƒê·ªô ·∫©m:** ${humidity}%`,
            inline: true,
          },
          {
            name: "üí® Gi√≥",
            value:
              `> **T·ªëc ƒë·ªô:** ${windSpeed} m/s\n` +
              `> **H∆∞·ªõng:** ${getWindDirection(windDeg)}`,
            inline: true,
          },
          {
            name: "‚òÅÔ∏è M√¢y che ph·ªß",
            value: `> **M√¢y:** ${clouds}%`,
            inline: true,
          },
          {
            name: "üå™Ô∏è √Åp su·∫•t",
            value: `> **√Åp su·∫•t:** ${pressure} hPa`,
            inline: true,
          },
          {
            name: "üå•Ô∏è Th·ªùi ti·∫øt",
            value: `> **M√¥ t·∫£:** ${weather}`,
            inline: true,
          },
          {
            name: "üìå Khuy·∫øn ngh·ªã",
            value: `${recommendation}`,
            inline: false,
          }
        )

        .setFooter({
          text: `D·ªØ li·ªáu c·∫≠p nh·∫≠t t·ª´ OpenWeather API`,
          iconURL:
            "https://openweathermap.org/themes/openweathermap/assets/vendor/owm/img/widgets/logo_60x60.png",
        })
        .setTimestamp();

      message.reply({ embeds: [embed] });
    } catch (error) {
      console.error("Error:", error);
      message.reply(
        "Kh√¥ng t√¨m th·∫•y th√¥ng tin th·ªùi ti·∫øt cho v·ªã tr√≠ b·∫°n y√™u c·∫ßu. Vui l√≤ng ki·ªÉm tra l·∫°i."
      );
    }
  }
});

// Handle errors
client.on("error", (error) => {
  // Critical errors should still be logged
  console.error("Discord client error:", error);
});

//WEATHER

const kelvinToCelsius = (kelvin) => (kelvin - 273.15).toFixed(1);

const weatherEmojis = {
  Clear: "‚òÄÔ∏è",
  Clouds: "‚òÅÔ∏è",
  Rain: "üåßÔ∏è",
  Drizzle: "üå¶Ô∏è",
  Thunderstorm: "‚õàÔ∏è",
  Snow: "üå®Ô∏è",
  Mist: "üå´Ô∏è",
  Smoke: "üå´Ô∏è",
  Haze: "üå´Ô∏è",
  Dust: "üå´Ô∏è",
  Fog: "üå´Ô∏è",
  Sand: "üå´Ô∏è",
  Ash: "üå´Ô∏è",
  Squall: "üí®",
  Tornado: "üå™Ô∏è",
};

const windDirections = {
  0: "B·∫Øc",
  45: "ƒê√¥ng B·∫Øc",
  90: "ƒê√¥ng",
  135: "ƒê√¥ng Nam",
  180: "Nam",
  225: "T√¢y Nam",
  270: "T√¢y",
  315: "T√¢y B·∫Øc",
  360: "B·∫Øc",
};

function getWindDirection(degrees) {
  const directions = Object.keys(windDirections).map(Number);
  const closest = directions.reduce((prev, curr) => {
    return Math.abs(curr - degrees) < Math.abs(prev - degrees) ? curr : prev;
  });
  return windDirections[closest];
}

function getWeatherRecommendation(temp, humidity, windSpeed, weatherMain) {
  if (weatherMain === "Rain" || weatherMain === "Thunderstorm") {
    return "üåÇ N√™n mang theo √¥/√°o m∆∞a khi ra ngo√†i";
  } else if (temp > 35) {
    return "üåû N√™n tr√°nh ho·∫°t ƒë·ªông ngo√†i tr·ªùi, u·ªëng nhi·ªÅu n∆∞·ªõc";
  } else if (temp < 15) {
    return "üß• N√™n m·∫∑c ·∫•m khi ra ngo√†i";
  } else if (windSpeed > 10) {
    return "üå™Ô∏è Gi√≥ m·∫°nh, c·∫©n th·∫≠n khi di chuy·ªÉn";
  } else if (temp >= 20 && temp <= 30 && humidity < 80) {
    return "‚ú® Th·ªùi ti·∫øt thu·∫≠n l·ª£i cho c√°c ho·∫°t ƒë·ªông ngo√†i tr·ªùi";
  }
  return "üëå Th·ªùi ti·∫øt b√¨nh th∆∞·ªùng, c√≥ th·ªÉ sinh ho·∫°t b√¨nh th∆∞·ªùng";
}

function getTemperatureColor(temp) {
  if (temp <= 0) return "#1E90FF"; // R·∫•t l·∫°nh - xanh d∆∞∆°ng
  if (temp <= 15) return "#87CEEB"; // L·∫°nh - xanh nh·∫°t
  if (temp <= 25) return "#98FB98"; // M√°t m·∫ª - xanh l√° nh·∫°t
  if (temp <= 30) return "#FFD700"; // ·∫§m √°p - v√†ng
  if (temp <= 35) return "#FFA500"; // N√≥ng - cam
  return "#FF4500"; // R·∫•t n√≥ng - ƒë·ªè cam
}

async function getCoordinates(location) {
  try {
    const query = `${location}`;
    const response = await axios.get(
      "https://nominatim.openstreetmap.org/search",
      {
        headers: {
          "User-Agent": "MyDiscordWeatherBot/1.0 (contact: cuonglp@apero.vn)",
        },
        params: {
          q: query,
          format: "json",
          limit: 1,
        },
      }
    );

    if (response.data.length === 0) {
      throw new Error("Kh√¥ng t√¨m th·∫•y v·ªã tr√≠.");
    }

    const { lat, lon, display_name } = response.data[0];
    return { lat, lon, display_name };
  } catch (error) {
    console.error("Nominatim API Error:", error.message || error);
    throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t·ª´ Nominatim.");
  }
}

function formatDisplayName(displayName) {
  return displayName
    .replace("District", "Qu·∫≠n")
    .replace("Hanoi", "H√† N·ªôi")
    .replace("Vietnam", "Vi·ªát Nam");
}

function formatDateTime(date) {
  const formatter = new Intl.DateTimeFormat("vi-VN", {
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
  });
  return formatter.format(date);
}

// Add functions from node.js
async function fetchMenu(merchantId) {
  const url = `https://portal.grab.com/foodweb/v2/merchants/${merchantId}`;
  const res = await axios.get(url);
  return res.data.merchant.menu;
}

function sumItems(menu, idx) {
  let sum = 0;
  for (let i = 0; i < idx; i++) {
    sum += menu.categories[i].items.length;
  }
  return sum;
}

function generateColumnLetters() {
  const letters = [];
  const A = "A".charCodeAt(0);
  for (let i = 0; i < 26; i++) {
    letters.push(String.fromCharCode(A + i));
  }
  for (let i = 0; i < 26; i++) {
    for (let j = 0; j < 26; j++) {
      letters.push(String.fromCharCode(A + i) + String.fromCharCode(A + j));
    }
  }
  return letters;
}

const clc = generateColumnLetters();

const colors = [
  "FFFF00",
  "CCFF33",
  "66FF99",
  "00CCCC",
  "3366FF",
  "9933FF",
  "FF3399",
  "FF3366",
];

// Add missing showListAll function
async function showListAll(message, isEnding = false) {
  let summary = "üìã Danh s√°ch ƒë·∫∑t m√≥n:\n\n";
  let totalUsers = 0;
  let totalItems = 0;
  let totalPrice = 0;
  const itemCounts = new Map();
  const userOrders = new Map();

  for (const [messageId, poll] of activePolls) {
    for (const [userId, selections] of poll.selections.entries()) {
      totalUsers++;
      const user = await message.guild.members.fetch(userId);
      const userName = user.nickname || user.user.username;

      summary += `${userName} ƒë√£ ch·ªçn:\n`;
      let userTotal = 0;

      for (const [itemNumber, quantity] of selections.entries()) {
        totalItems += quantity;
        const item = poll.items.get(itemNumber);

        // Update item counts
        const currentCount = itemCounts.get(item.name) || 0;
        itemCounts.set(item.name, currentCount + quantity);

        const itemPrice = parseInt(item.price.replace(/[^\d]/g, ""));
        const itemTotal = itemPrice * quantity;
        userTotal += itemTotal;
        totalPrice += itemTotal;

        summary += `‚Ä¢ ${item.name} - ${item.price}\n`;
      }

      userOrders.set(userName, userTotal);
      summary += "\n";
    }
  }

  summary += `\nT·ªïng c·ªông:\n‚Ä¢ ${totalUsers} ng∆∞·ªùi ƒë√£ ch·ªçn\n‚Ä¢ ${totalItems} su·∫•t ƒë∆∞·ª£c ƒë·∫∑t\n\n`;

  if (itemCounts.size > 0) {
    summary += "Chi ti·∫øt theo m√≥n:\n";
    for (const [itemName, count] of itemCounts) {
      summary += `‚Ä¢ ${itemName}: ${count} su·∫•t\n`;
    }
  }

  summary += `\nT·ªïng ti·ªÅn: ${totalPrice.toLocaleString("vi-VN")} VNƒê\n\n`;

  if (userOrders.size > 0) {
    summary += "Chi ti·∫øt chia ti·ªÅn:\n";
    for (const [userName, total] of userOrders) {
      summary += `‚Ä¢ ${userName}: ${total.toLocaleString("vi-VN")} VNƒê\n`;
    }
  }

  try {
    await message.channel.send(summary);
  } catch (error) {
    if (error.code === 50035) {
      const chunks = summary.match(/.{1,1900}/g) || [];
      for (const chunk of chunks) {
        await message.channel.send(chunk);
      }
    }
  }

  return {
    totalUsers,
    totalItems,
    totalPrice,
    items: Object.fromEntries(itemCounts),
    userOrders: Object.fromEntries(userOrders),
  };
}

// Add message deletion handler
client.on("messageDelete", async (message) => {
  if (message.author.bot) return;

  const activePoll = Array.from(activePolls.entries()).find(
    ([_, poll]) => Date.now() < poll.endTime
  );

  if (!activePoll) return;
  const [pollId, poll] = activePoll;

  if (poll.userMessages?.get(message.author.id)?.has(message.id)) {
    const messageData = poll.userMessages
      .get(message.author.id)
      .get(message.id);

    const userSelections = poll.selections.get(message.author.id);
    if (userSelections) {
      messageData.selections.forEach((num) => userSelections.delete(num));

      if (userSelections.size === 0) {
        poll.selections.delete(message.author.id);
      }
    }

    try {
      const channel = message.channel;
      const replyMessage = await channel.messages.fetch(messageData.replyId);
      await replyMessage.delete();
    } catch (error) {
      console.error("Failed to delete reply message:", error);
    }

    poll.userMessages.get(message.author.id).delete(message.id);
  }
});

// Export functions for external use
module.exports = {
  fetchMenu,
};

// Login the bot
client.login(process.env.DISCORD_TOKEN).catch((error) => {
  // Critical login errors should still be logged
  console.error("Failed to login:", error);
});
