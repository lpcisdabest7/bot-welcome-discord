const {
  Client,
  GatewayIntentBits,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} = require("discord.js");
const { OpenAI } = require("openai");
require("dotenv").config();

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.MessageContent,
  ],
});

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const config = {
  welcomeChannelIds: process.env.CHANNEL_ID
    ? process.env.CHANNEL_ID.split(",").map((id) => id.trim())
    : [],
  serverRules: [
    "1. T√¥n tr·ªçng m·ªçi th√†nh vi√™n",
    "2. Kh√¥ng spam v√† qu·∫£ng c√°o",
    "3. Tu√¢n th·ªß quy t·∫Øc c·ªßa Discord",
    "4. Gi·ªØ g√¨n m√¥i tr∆∞·ªùng l√†nh m·∫°nh",
  ],
};

const activeGames = new Map();

// S·ª± ki·ªán khi bot s·∫µn s√†ng
client.on("ready", () => {
  client.user.setActivity("Ch√†o m·ª´ng th√†nh vi√™n m·ªõi", { type: "WATCHING" });
});

// H√†m t·∫°o embed welcome message
function createWelcomeEmbed(member) {
  return new EmbedBuilder()
    .setColor("#00ff00")
    .setTitle(`üéâ Ch√†o m·ª´ng th√†nh vi√™n m·ªõi!`)
    .setDescription(`Ch√†o m·ª´ng ${member} ƒë√£ tham gia server c·ªßa ch√∫ng t√¥i!`)
    .setThumbnail(member.user.displayAvatarURL({ dynamic: true }))
    .addFields({
      name: "üìú Lu·∫≠t Server",
      value: config.serverRules.join("\n"),
    })
    .setFooter({
      text: `ID: ${member.id}`,
      iconURL: member.guild.iconURL(),
    })
    .setTimestamp();
}

// S·ª± ki·ªán khi c√≥ th√†nh vi√™n m·ªõi tham gia
client.on("guildMemberAdd", async (member) => {
  try {
    const welcomeChannel = config.welcomeChannelIds
      .map((id) => member.guild.channels.cache.get(id))
      .find((channel) => channel);

    if (welcomeChannel) {
      const welcomeEmbed = createWelcomeEmbed(member);
      await welcomeChannel.send({
        content: `${member} v·ª´a tham gia server! üéâ`,
        embeds: [welcomeEmbed],
      });
    }
  } catch (error) {
    console.error("L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω th√†nh vi√™n m·ªõi:", error);
  }
});

async function generateTriviaQuestion() {
  const response = await openai.chat.completions.create({
    model: "gpt-4o",
    messages: [
      {
        role: "system",
        content: `
          B·∫°n l√† m·ªôt bot t·∫°o c√¢u h·ªèi quiz chuy√™n nghi·ªáp v·ªÅ b√≥ng ƒë√°. H√£y t·∫°o c√¢u h·ªèi theo format sau:
          [C√¢u h·ªèi]
          A. [ƒê√°p √°n A]
          B. [ƒê√°p √°n B]
          C. [ƒê√°p √°n C]
          D. [ƒê√°p √°n D]
          ---
          ƒê√°p √°n ƒë√∫ng: [A/B/C/D]
          Gi·∫£i th√≠ch: [Gi·∫£i th√≠ch chi ti·∫øt v·ªÅ ƒë√°p √°n ƒë√∫ng]
        `,
      },
      {
        role: "user",
        content: `
          B·∫°n l√† m·ªôt chuy√™n gia v·ªÅ l·ªãch s·ª≠ b√≥ng ƒë√° qu·ªëc t·∫ø. Khi t·∫°o c√¢u h·ªèi, h√£y ƒë·∫£m b·∫£o r·∫±ng ch·ªß ƒë·ªÅ c√≥ ƒë·ªô kh√≥ cao.
        `,
      },
    ],
    temperature: 1.0,
  });

  const content = response.choices[0].message.content;
  const [question, answerSection] = content.split("---");
  const answerLines = answerSection.trim().split("\n");
  const correctAnswer = answerLines[0].split(": ")[1].charAt(0);
  const explanation = answerLines[1].split(": ")[1];

  return {
    question: question.trim(),
    correctAnswer: correctAnswer,
    explanation: explanation,
  };
}

// S·ª± ki·ªán khi nh·∫≠n tin nh·∫Øn
client.on("messageCreate", async (message) => {
  if (message.author.bot) return;

  if (message.content.startsWith("!quiz")) {
    const args = message.content.split(" ");
    const delay = args[1] ? parseInt(args[1]) * 1000 : 10000;

    try {
      const loadingMsg = await message.channel.send(
        "ü§î ƒêang t·∫°o c√¢u h·ªèi quiz..."
      );

      const quiz = await generateTriviaQuestion();

      await loadingMsg.delete();

      activeGames.set(message.channelId, {
        correctAnswer: quiz.correctAnswer,
        explanation: quiz.explanation,
        answers: new Map(),
        endTime: Date.now() + delay,
      });

      await message.channel.send(
        quiz.question +
          "\n\nüí° Tr·∫£ l·ªùi b·∫±ng c√°ch g√µ A, B, C ho·∫∑c D\n‚è∞ Th·ªùi gian: " +
          delay / 1000 +
          " gi√¢y"
      );

      setTimeout(async () => {
        const game = activeGames.get(message.channelId);
        if (!game) return;

        let summary = "üéØ K·∫øt qu·∫£:\n\n";
        summary += `ƒê√°p √°n ƒë√∫ng: ${game.correctAnswer}\n`;
        summary += `üìù Gi·∫£i th√≠ch: ${game.explanation}\n\n`;

        if (game.answers.size === 0) {
          summary += "Kh√¥ng c√≥ ai tr·∫£ l·ªùi üòÖ";
        } else {
          const correctUsers = [];
          const wrongUsers = [];

          game.answers.forEach((answer, userId) => {
            const user = message.guild.members.cache.get(userId);
            const username = user ? user.displayName : "Unknown User";

            if (answer === game.correctAnswer) {
              correctUsers.push(`${username} (${answer})`);
            } else {
              wrongUsers.push(`${username} (${answer})`);
            }
          });

          summary += `‚úÖ Tr·∫£ l·ªùi ƒë√∫ng (${correctUsers.length}):\n${
            correctUsers.length > 0 ? correctUsers.join("\n") : "Kh√¥ng c√≥"
          }\n\n`;
          summary += `‚ùå Tr·∫£ l·ªùi sai (${wrongUsers.length}):\n${
            wrongUsers.length > 0 ? wrongUsers.join("\n") : "Kh√¥ng c√≥"
          }`;
        }

        await message.channel.send(summary);
        activeGames.delete(message.channelId);
      }, delay);
    } catch (error) {
      console.error("L·ªói:", error);
      await message.channel.send("‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u h·ªèi quiz!");
    }
  } else if (activeGames.has(message.channelId)) {
    const game = activeGames.get(message.channelId);
    const answer = message.content.trim().toUpperCase();

    if (["A", "B", "C", "D"].includes(answer)) {
      if (!game.answers.has(message.author.id) && Date.now() < game.endTime) {
        game.answers.set(message.author.id, answer);
        await message.react("üëç");
      }
    }
  }
});

// X·ª≠ l√Ω l·ªói kh√¥ng mong mu·ªën
process.on("unhandledRejection", (error) => {
  console.error("L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c:", error);
});

// ƒêƒÉng nh·∫≠p bot
client.login(process.env.DISCORD_TOKEN);
